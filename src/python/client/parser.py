# -*- coding: utf-8 -*-
import os

import common.constants
import client.config

from common.parser import CommandLineFlagConfigOption
from common.parser import ConfigParser
from common.parser import GeneralChoiceConfigOption
from common.parser import GeneralConfigOption
from common.parser import ParserError
from common.parser import ValidatedCommandLineConfigOption
from common.parser import ValidatedFileConfigOption

_APP_VERSION = common.constants.get_app_version("myscm-cli")
_HELP_DESC = '''This is client side of the mySCM application â€“ simple Software
Configuration Management (SCM) tool for managing software and configuration of
the clients running GNU/Linux distributions. This application is intended to
apply GNU/Linux system image created with myscm-srv application.'''


class ClientParserError(ParserError):
    pass


##################################
# Client's configuration options #
##################################


class ApplySysImgConfigOption(ValidatedCommandLineConfigOption):
    """Configuration option read from CLI specifying to apply changes read
       from given system image (which is tar.gz archive)."""

    def __init__(self):
        super().__init__(
            "ApplyImg", None, self._assert_sys_img_version_valid,
            "--apply-img", metavar="SYS_IMG_VER",
            type=self._assert_sys_img_version_valid,
            help="apply changes to the system updating it to the system state "
                 "identified by unique SYS_IMG_VER integer")

    def _assert_sys_img_version_valid(self, sys_img_ver):
        return common.parser.assert_sys_img_ver_valid(sys_img_ver)


class UpdateSysImgConfigOption(CommandLineFlagConfigOption):
    """Configuration option read from CLI specifying to update system image
       by downloading it from other client or server."""

    def __init__(self):
        super().__init__(
            "UpdateSysImg", "--update",
            help="update system image by downloading it from one of the "
                 "clients predefined in configuration file")


class UpgradeSysImgConfigOption(CommandLineFlagConfigOption):
    """Configuration option read from CLI specifying to update system image
       by downloading it from other client or server and then to apply
       downloaded system image."""

    def __init__(self):
        super().__init__(
            "UpgradeSysImg", "--upgrade",
            help="equivalent of running --update and --apply-img option")


class SSLCertConfigOption(GeneralConfigOption):
    """Configuration option read from file and/or CLI specifying SSL
       certificate file path to verify system image created by myscm-srv."""

    # default if not provided in config file
    DEFAULT_SSL_CERT_PATH = "/etc/myscm-cli/ssl.sig"

    def __init__(self, ssl_cert_path=None):
        super().__init__(
            "SSLCertPath",
            ssl_cert_path or self.DEFAULT_SSL_CERT_PATH,
            self._assert_ssl_cert_path_valid, True, "--ssl-cert",
            metavar="PATH", type=self._assert_ssl_cert_path_valid,
            help="full path to the server's SSL certificate that is being "
                 "used to verify signature of the system image generated by "
                 "the myscm-srv (default value: '{}')".format(
                    self.DEFAULT_SSL_CERT_PATH))

    def _assert_ssl_cert_path_valid(self, cert_path):
        """SSL certificate path option validator."""

        if not os.path.isfile(cert_path):
            m = "Given SSL certificate file '{}' probably doesn't exist"\
                .format(cert_path)
            raise ClientParserError(m)

        return cert_path


class UpdateProtocolConfigOption(GeneralChoiceConfigOption):
    """Configuration option read from CLI specifying which protocol should be
       preferred to download new system image from one of the predefined
       client. This option makes sense only with --update and --upgrade
       options."""

    ALLOWED_PROTOCOLS = ["FTP", "SFTP"]
    DEFAULT_PROTOCOL = "FTP"  # default if not provided in config file

    def __init__(self, protocol=None):
        super().__init__(
            "SysImgUpdateProtocol", protocol or self.DEFAULT_PROTOCOL,
            self.ALLOWED_PROTOCOLS, True, "-p", "--protocol", metavar="PROTO",
            help="select protocol that will be used to download newest system "
                 "image generated by myscm-srv (default is {}); this option "
                 "makes sense only with --update and --upgrade options"
                 .format(self.DEFAULT_PROTOCOL))


class VerifySysImgConfigOption(CommandLineFlagConfigOption):
    """Configuration option read from CLI specifying to verify signature of
       the given system image."""

    def __init__(self):
        super().__init__(
            "VerifySysImg", "--verify-img",
            help="verify signature of the system image identified unique "
                 "SYS_IMG_VER integer")


class ForceApplyConfigOption(CommandLineFlagConfigOption):
    """Configuration option read from CLI specifying do not bother user with
       interactive questions."""

    def __init__(self):
        super().__init__(
            "ForceApply", "--force",
            help="take default actions and do not ask interactive questions "
                 "while --apply-img")


class SFTPUsernameConfigOption(ValidatedFileConfigOption):
    """Configuration option read from CLI specifying SFTP username being used
       to connect to other client to download newest system image."""

    def __init__(self):
        super().__init__(
            "SFTPUsername", None, self._assert_sftp_username_valid, False)

    def _assert_sftp_username_valid(self, sftp_username):
        if sftp_username == "":
            raise ClientParserError("SFTP username cannot be empty")

        return sftp_username


class SFTPPasswordConfigOption(ValidatedFileConfigOption):
    """Configuration option read from CLI specifying SFTP password being used
       to connect to other client to download newest system image."""

    def __init__(self):
        super().__init__(
            "SFTPPassword", None, self._assert_sftp_passwd_valid, False)

    def _assert_sftp_passwd_valid(self, sftp_passwd):
        if sftp_passwd == "":
            raise ClientParserError("SFTP password cannot be empty")

        return sftp_passwd


#############################################
# Core of the client's configuration parser #
#############################################


class ClientConfigParser(ConfigParser):
    """Application configuration parser for configuration read from both
       configuration file and command line (CLI)."""

    def __init__(self, config_path, config_section_name):
        _CLIENT_DEFAULT_CONFIG = [
            ApplySysImgConfigOption(),
            UpdateSysImgConfigOption(),
            UpgradeSysImgConfigOption(),
            SSLCertConfigOption(),
            UpdateProtocolConfigOption(),
            VerifySysImgConfigOption(),
            ForceApplyConfigOption(),
            SFTPUsernameConfigOption(),
            SFTPPasswordConfigOption()
        ]
        super().__init__(config_path, config_section_name,
                         _CLIENT_DEFAULT_CONFIG, _HELP_DESC, _APP_VERSION)

    def parse(self):
        self._parse()
        client_config = client.config.ClientConfig(self.config)
        return client_config
